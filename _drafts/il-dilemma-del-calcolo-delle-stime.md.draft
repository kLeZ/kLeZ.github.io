---
title: "Il dilemma del calcolo delle stime"
tags: 
##date: __CURRENT_DATE
---

Di norma direi che il calcolo delle stime è qualcosa che facciamo tutti i giorni e che quindi almeno sulla carta ogni programmatore dovrebbe saper farlo.

Di norma direi anche che ci dovrebbe essere una procedura, una *best practice* una formula che possa calcolare una stima.

Siamo programmatori, quindi siamo ingegneri (più o meno)!

{% include more.html %}

Invece questo argomento rimane complesso e basato su esperienza e capacità personali della persona che sta tentando di tirare fuori un numero.

Oltretutto, quella che dovrebbe essere solo un'informazione di massima utile per avere un'idea *a spanne* dei tempi di realizzazione diventa spesso la *deadline*, ma questa è un'altra storia, oppure **un altro rant**, se volete.


## Refs

Navigando su [*Hacker News*](https://news.ycombinator.com/) ho trovato questa perla, che qualcuno ha deciso di condividere rianimandola tramite archive.org.

Se volete il link trovato su Hacker News e la perla in questione, [qui](https://news.ycombinator.com/item?id=28667174) e [qua](https://web.archive.org/web/20170603123809/http://www.tuicool.com:80/articles/7niyym) trovate tutto.

Di seguito rielaboro a modo mio, come sempre.

## L'idea geniale

L'idea è una ulteriore *best practice*, ma in forma di formula e non di additivo statistico, come mi insegnò un mio capo un tempo.

La regola aurea è:

> citation "#AltDevBlogADay"
> Moltiplica sempre le tue stime per π

Qualcuno - un designer, il tuo *team leader*, un amico, tua madre - ti chiede di fare qualcosa. Rifletti un po', prendi appunti, consideri ciò che ti è stato richiesto e fai un piano e una stima.

Ma le cose cambiano. Esce fuori che c'erano cose che il tuo *qualcuno* ha trascurato di menzionare, e mentre svolgevi il lavoro hai avuto alcune idee per migliorarlo ulteriormente. Di fatto hai più cose da fare.

E ovviamente, non va tutto liscio. Il primo tentativo è stato un fallimento, ma alla fine è stato istruttivo. Poi con il secondo tentativo hai accelerato e hai creato una serie di problemi strutturali che hanno richiesto un po' di *refactoring*. Hai impiegato due giorni in più per cercare una soluzione alternativa. Tutto sommato, hai seguito un percorso tortuoso verso il tuo obiettivo.

Quindi, quanto è durato il lavoro rispetto al piano originale?

E il gioco è fatto: qualunque cosa pensi quando inizi, una volta superata la ricerca, la progettazione, le discussioni, i prototipi, i fallimenti, i test, l'abbandono dei requisiti e tutti gli altri capricci del processo creativo, l'avrai indubbiamente fatto *π volte* quanto avevi pianificato inizialmente.

Ora, qualcuno potrebbe mettere in dubbio il mio rigore matematico, e perfino contestare quella che ritengo essere la conclusione incontrovertibile. Le persone possono affermare che il moltiplicatore corretto non è in effetti π, ma che è piuttosto 2, o √2, o e, o il rapporto aureo φ. Tuttavia, non sono a conoscenza di nessuno che sostenga che il moltiplicatore sia inferiore a uno.

> Indipendentemente dalle tue inclinazioni numerologiche, il punto è che devi darti il ​​permesso di ammettere che, quando inizi un progetto, non hai il quadro completo, non sai come andranno le cose e c'è del lavoro da fare di cui non hai nessuna idea o indizi, all'inizio.
> Nessuna quantità di pianificazione e analisi delle attività può cambiarlo, quindi non provarci neanche. Invece, concediti un plausibile cuscinetto e impegnati a portare avanti il lavoro.

