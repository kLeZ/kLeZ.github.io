<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://klez.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://klez.me/" rel="alternate" type="text/html" /><updated>2023-06-25T15:57:09+02:00</updated><id>https://klez.me/feed.xml</id><title type="html">Alessandro ‘kLeZ’ Accardo personal website</title><subtitle>This is the personal website of an Italian developer once called &apos;kLeZ&apos;.</subtitle><entry><title type="html">Trova lo st***zo! The IBM Way!</title><link href="https://klez.me/2022/05/05/trova-lo-stzo-the-ibm-way/" rel="alternate" type="text/html" title="Trova lo st***zo! The IBM Way!" /><published>2022-05-05T12:00:50+02:00</published><updated>2022-05-05T12:00:50+02:00</updated><id>https://klez.me/2022/05/05/trova-lo-stzo-the-ibm-way</id><content type="html" xml:base="https://klez.me/2022/05/05/trova-lo-stzo-the-ibm-way/"><![CDATA[<p>Oggi leggevo un brevissimo articolo, che però ci tengo a condividere con i miei (pochi[ssimi]) lettori. Forse lo condivido solo per me stesso perché ho una pessima memoria selettiva, che però seleziona un po’ come gli pare.</p>
      <p>Il titolo originale è “The Asshole Test”, il mio è un po’ più colorito, ma non più di tanto.</p>
      <!--more-->
      <p class="m-0 invisible zero-size">
        <a class="invisible" id="read-more" href="#">read more</a>
      </p>
      <p>Un dipendente IBM ha voluto condividere <a href="https://johnpublic.mataroa.blog/blog/the-asshole-test/">questo</a> articolo col mondo in cui racconta il test che gli è stato somministrato in fase di assunzione anni addietro.</p>
      <p>Il test consiste nel seguente schema.</p>
      <p>Un gruppo di circa 8 persone viene portato in una stanza e gli viene chiesto di risolvere un <em>puzzle</em> insieme.</p>
      <p>A ogni partecipante vengono fornite delle informazioni, nella stanza c’è una lavagna bianca e un timer che conta alla rovescia 60 minuti.</p>
      <p>Nella sua esperienza, <em>John</em> (pseudonimo inventato per poter esprimere liberamente le proprie opinioni senza che queste siano legate al suo datore di lavoro) racconta che inizialmente c’è stato silenzio, poi qualcuno ha iniziato a prendere la parola per tentare di raccogliere le informazioni di tutti per cercare di metterle a fattor comune.</p>
      <p>Qualcuno “conquista” la lavagna e prende un pennarello, attendendo qualcosa da scrivere, autoproclamandosi <em>leader</em>. Le informazioni però sono confuse, quindi c’è poco da scrivere.</p>
      <p>Questa scena di autoproclamazione si ripete quando qualcun altro interrompe un collega che stava tentando di leggere ad alta voce le informazioni in suo possesso per condividerle con il gruppo.</p>
      <p>Alla fine l’ora finisce e e il puzzle non è stato risolto, <em>neanche lontanamente</em>.</p>
      <p>Confusi e spompati escono tutti dalla stanza per passare al prossimo test.</p>
      <p>Alla fine del giorno il gruppo è diviso in due stanze e il nostro Johnny, come potrete immaginare, è nel gruppo di “quelli bravi”, quelli che sono passati.</p>
      <p>Sei mesi dopo affianca un collega che sta gestendo il medesimo test per un altro gruppo di candidati. La domanda più ovvia per John è sapere se c’è mai stato qualcuno che ha risolto il puzzle.</p>
      <p>La risposta è spiazzante: “Oh, non è quello lo scopo, questo è un test antist<strong><em>zi. Ti permette di vedere chi fa lo st</em></strong>zo sotto pressione, e quelli non passano al round successivo.</p>
      <h2 id="conclusioni">Conclusioni</h2>
      <p>Devo dire che un po’ ha spiazzato anche me, però il titolo era abbastanza esplicativo per permettermi di capire a grandi linee dove voleva arrivare, del resto l’articolo si legge in neanche un minuto, quindi forse ci sto anche ragionando troppo :P</p>
      <p>A me un test del genere sarebbe veramente piaciuto implementarlo nella mia azienda, e penso che io l’avrei passato, ma ci vorrebbe un grosso lavoro di introspezione per esserne sicuri o altrimenti bisognerebbe… fare il test!</p>
      <p>Voi che ne pensate? Passereste il test?</p>
      ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Oggi leggevo un brevissimo articolo, che però ci tengo a condividere con i miei (pochi[ssimi]) lettori. Forse lo condivido solo per me stesso perché ho una pessima memoria selettiva, che però seleziona un po’ come gli pare. Il titolo originale è “The Asshole Test”, il mio è un po’ più colorito, ma non più di tanto.]]></summary></entry><entry><title type="html">FizzBuzz e l’ottimizzazione</title><link href="https://klez.me/2022/03/25/fizzbuzz-e-lottimizzazione/" rel="alternate" type="text/html" title="FizzBuzz e l’ottimizzazione" /><published>2022-03-25T20:57:13+01:00</published><updated>2022-03-25T20:57:13+01:00</updated><id>https://klez.me/2022/03/25/fizzbuzz-e-lottimizzazione</id><content type="html" xml:base="https://klez.me/2022/03/25/fizzbuzz-e-lottimizzazione/"><![CDATA[<p>Oggi vorrei parlarvi di un algoritmo.</p>
    <p>Di norma un algoritmo talmente semplice da essere usato durante i colloqui per la valutazione della capacità <em>minima</em> di scrivere e leggere codice che comprenda il minimo indispensabile di logica, matematica e pensiero critico.</p>
    <p>L’algoritmo consiste nell’implementare una funzione che dati i numeri da 1 a 100 faccia quanto segue:</p>
    <ul>
      <li>stampi la stringa “<em>Fizz</em>” quando il numero è un multiplo di 3</li>
      <li>stampi la stringa “<em>Buzz</em>” quando il numero è un multiplo di 5</li>
      <li>stampi la stringa “<em>FizzBuzz</em>” quando il numero è un multiplo di 3 o 5</li>
      <li>stampi il numero quando non è un multiplo di 3 né di 5</li>
    </ul>
    <p>Semplice semplice. Ma allora perché ne parlo?</p>
    <!--more-->
    <p class="m-0 invisible zero-size">
      <a class="invisible" id="read-more" href="#">read more</a>
    </p>
    <p>Ne parlo perché da un occhio esperto permette di valutare la lentezza <em>matematica</em> di un operatore in particolare, il modulo.</p>
    <p>E quindi mi permette di parlare di ottimizzazioni di basso livello.</p>
    <h2 id="limplementazione-scolastica">L’implementazione scolastica</h2>
    <p>A livello di studio, si usa il modulo per questo tipo di problema. Il listato che segue è l’implementazione completa.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">15</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"FizzBuzz"</span><span class="o">);</span>
	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">5</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Buzz"</span><span class="o">);</span>
	<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Fizz"</span><span class="o">);</span>
	<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <p>Questa è l’implementazione, banale un ciclo e 4 if con delle operazioni di modulo. Ma il modulo è un’operazione lenta.</p>
    <p>Come descritto <a href="https://cs.stackexchange.com/questions/12931/complexity-of-taking-mod">qui</a> e <a href="https://en.wikipedia.org/wiki/Computational_complexity_of_mathematical_operations">qui</a>, siamo di fronte a una complessità di <code class="language-plaintext highlighter-rouge">O(M(n))</code> che è veramente parecchio. Mi sono chiesto se fosse possibile ottimizzare.</p>
    <p>ho messo quindi in piedi un programma, che ho raffinato in varie iterazioni, che potete vedere a questo <a href="https://gist.github.com/kLeZ/c1b3b387521747bd732c32a5834146b7">GIST</a>.</p>
    <p>Di seguito vi commento la versione finale.</p>
    <h2 id="le-righe-di-boilerplate">Le righe di boilerplate</h2>
    <p>C’è molto boilerplate in questo codice, materialmente perché volevo quantificare le differenze di approccio in dei benchmark, a partire dalla stessa jvm.</p>
    <p>Di conseguenza ho costruito dei runnable con i quattro metodi che ho implementato per calcolare il fizzbuzz e intorno c’è tutta un’impalcatura di misurazione delle prestazioni di elaborazione dell’algoritmo.</p>
    <p>Ho fatto tutto <em>in casa</em> perché volevo azzerare le dipendenze.</p>
    <p>Di fatto questo codice gira senza dipendenze sulla jvm, è autocontenuto, proprio per permettere anche ad altri di farlo girare facilmente, scambiando solo il file col codice.</p>
    <p>Qui spiego, pezzo per pezzo tutto il codice, partendo dalle costanti in cima.</p>
    <h2 id="le-costanti">Le costanti</h2>
    <p>Questa costante rappresenta lo “standard” output, per avere comunque l’output degli algoritmi evitando però le scritture dirette su console, che risultano lente.</p>
    <p>L’ho fatto per velocizzare le computazioni, visto che alla fine questo codice verrà eseguito 1M di volte.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">StringBuilder</span> <span class="no">OUT</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
</code></pre>
      </div>
    </div>
    <p>Costanti che controllano cosa e quando stampare sull’output.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="no">PRINT_AT_LAST</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="no">PRINT_FIZZ_BUZZ</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</code></pre>
      </div>
    </div>
    <p>Le famigerate costanti FizzBuzz, solo perché a un certo punto sono stato curioso di cambiare questi valori in modo coerente per sperimentare come si sarebbe comportato l’algoritmo. Del resto il compilatore queste costanti le riscrive <em>inline</em> quindi è una fatica in più che ho fatto, ma solo per amore della scienza e della sperimentazione!</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">FIZZ</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">BUZZ</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">FIZZ_BUZZ</span> <span class="o">=</span> <span class="mi">15</span><span class="o">;</span>
</code></pre>
      </div>
    </div>
    <p>Queste due costanti rappresentano il numero di iterazioni per l’algoritmo FizzBuzz (cioè i numeri da valutare per stampare Fizz, Buzz oppure FizzBuzz).</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MIN_FIZZ_BUZZ</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">MAX_FIZZ_BUZZ</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</code></pre>
      </div>
    </div>
    <p>Poco da dire. Queste sono le costanti che stampo “<em>a schermo</em>”.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">FIZZ_STRING</span> <span class="o">=</span> <span class="s">"Fizz"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">BUZZ_STRING</span> <span class="o">=</span> <span class="s">"Buzz"</span><span class="o">;</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">FIZZ_BUZZ_STRING</span> <span class="o">=</span> <span class="s">"FizzBuzz"</span><span class="o">;</span>
</code></pre>
      </div>
    </div>
    <p>Questa costante invece rappresenta il numero di esecuzioni per ogni algoritmo.</p>
    <p>Si tratta di un numero molto alto proprio perché vogliamo tagliare i picchi statistici e vogliamo oltrepassare anche il tema dell’ottimizzazione del bytecode effettuata dalla JVM sul nostro codice. In statistica e nel benchmarking, più volte si effettua il test di esecuzione con registrazione dei tempi e più ci si avvicina alle reali prestazioni dell’algoritmo. Un milione di iterazioni mi sono sembrate “<em>abbastanza</em>”.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">ITERATIONS</span> <span class="o">=</span> <span class="mi">1_000_000</span><span class="o">;</span>
</code></pre>
      </div>
    </div>
    <h2 id="il-main">Il main</h2>
    <p>Stampo la versione.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">version</span><span class="o">());</span>
</code></pre>
      </div>
    </div>
    <p>Salvo l’istante in cui il programma “parte”.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="kd">final</span> <span class="kt">long</span> <span class="n">startProgram</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</code></pre>
      </div>
    </div>
    <p>Creo una mappa con tutti e quattro i metodi. Questa mappa verrà usata nelle 1M di iterazioni.</p>
    <p>Mi creo una mappa per avere vita facile nell’iterazione, è una tecnica che ho spesso usato e che mi piace parecchio, ovviamente non è l’unica tecnica per facilitare il lavoro di iterazione dinamica, ma a me piace e funziona bene.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;&gt;</span> <span class="n">waysTimes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
		<span class="n">waysTimes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nl">Scratch:</span><span class="o">:</span><span class="n">way1</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
		<span class="n">waysTimes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nl">Scratch:</span><span class="o">:</span><span class="n">way2</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
		<span class="n">waysTimes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="nl">Scratch:</span><span class="o">:</span><span class="n">way3</span><span class="o">,</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
		<span class="n">waysTimes</span><span class="o">.</span><span class="na">put</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="nc">Scratch</span><span class="o">.</span><span class="na">way4</span><span class="o">(</span><span class="no">MIN_FIZZ_BUZZ</span><span class="o">,</span> <span class="no">MAX_FIZZ_BUZZ</span><span class="o">),</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
</code></pre>
      </div>
    </div>
    <h2 id="literazione">L’iterazione</h2>
    <p>L’iterazione funziona così: per un milione di volte, per ogni implementazione, salva l’istante di partenza, esegui l’algoritmo, salva in una lista la differenza tra istanti di tempo, cioè il tempo trascorso <em>durante</em> il <code class="language-plaintext highlighter-rouge">.run()</code>.</p>
    <p>Alla fine dell’esecuzione di ognuna delle implementazioni, se non è il caso di stampare l’output di FizzBuzz (praticamente solo per motivi di debug)</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">ITERATIONS</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span> <span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="nc">Runnable</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">&gt;&gt;</span> <span class="n">entry</span> <span class="o">:</span> <span class="n">waysTimes</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
				<span class="kd">final</span> <span class="kt">long</span> <span class="n">start</span><span class="o">;</span>
				<span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
				<span class="n">entry</span><span class="o">.</span><span class="na">getKey</span><span class="o">().</span><span class="na">run</span><span class="o">();</span>
				<span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="k">if</span> <span class="o">(!</span><span class="no">PRINT_FIZZ_BUZZ</span><span class="o">)</span>
				<span class="no">OUT</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="no">OUT</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
		<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h2 id="il-calcolo-dei-risultati-del-benchmark">Il calcolo dei risultati del benchmark</h2>
    <p>Di seguito le istruzioni che collezionano le statistiche dei tempi di esecuzione delle varie esecuzioni degli algoritmi.</p>
    <p>Quello che faccio materialmente è collezionare degli oggetti <code class="language-plaintext highlighter-rouge">LongSummaryStatistics</code>, uno per ogni algoritmo eseguito.</p>
    <p>Questo è possibile perché per ogni iterazione vado a salvare la durata dell’esecuzione in una lista per ogni implementazione (<code class="language-plaintext highlighter-rouge">entry.getValue().add(System.nanoTime() - start)</code>).</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">LongSummaryStatistics</span><span class="o">&gt;</span> <span class="n">statistics</span> <span class="o">=</span> <span class="n">waysTimes</span><span class="o">.</span><span class="na">values</span><span class="o">()</span>
				<span class="o">.</span><span class="na">stream</span><span class="o">()</span>
				<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">l</span> <span class="o">-&gt;</span> <span class="n">l</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nl">LongSummaryStatistics:</span><span class="o">:</span><span class="k">new</span><span class="o">,</span> <span class="nl">LongSummaryStatistics:</span><span class="o">:</span><span class="n">accept</span><span class="o">,</span> <span class="nl">LongSummaryStatistics:</span><span class="o">:</span><span class="n">combine</span><span class="o">))</span>
				<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre>
      </div>
    </div>
    <p>Qui il calcolo del minimo dei tempi mediani di tutte le statistiche. Questa informazione indica quale è la durata minima tra tutti i tempi medi (quindi all’interno della media ponderata). Praticamente l’esecuzione più performante.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="kd">final</span> <span class="kt">double</span> <span class="n">minOfAvgs</span> <span class="o">=</span> <span class="n">statistics</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
				<span class="o">.</span><span class="na">mapToDouble</span><span class="o">(</span><span class="nl">LongSummaryStatistics:</span><span class="o">:</span><span class="n">getAverage</span><span class="o">)</span>
				<span class="o">.</span><span class="na">min</span><span class="o">()</span>
				<span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="mi">0</span><span class="no">D</span><span class="o">);</span>
</code></pre>
      </div>
    </div>
    <p>A questo punto mi vado a cercare quale implementazione ha totalizzato il risultato migliore, cioè il minimo dei mediani calcolato prima.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="nc">String</span> <span class="n">minOfAvgsName</span> <span class="o">=</span> <span class="s">"Ukn"</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">statistics</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kd">final</span> <span class="nc">LongSummaryStatistics</span> <span class="n">statistic</span> <span class="o">=</span> <span class="n">statistics</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
			<span class="kd">final</span> <span class="kt">double</span> <span class="n">average</span> <span class="o">=</span> <span class="n">statistic</span><span class="o">.</span><span class="na">getAverage</span><span class="o">();</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">average</span> <span class="o">==</span> <span class="n">minOfAvgs</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">minOfAvgsName</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Way%d"</span><span class="o">,</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
				<span class="k">break</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="n">println</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">());</span>
</code></pre>
      </div>
    </div>
    <p>Infine, stampo tutti i tempi e le statistiche.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">statistics</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kd">final</span> <span class="nc">LongSummaryStatistics</span> <span class="n">statistic</span> <span class="o">=</span> <span class="n">statistics</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">k</span><span class="o">);</span>
			<span class="kd">final</span> <span class="kt">double</span> <span class="n">average</span> <span class="o">=</span> <span class="n">statistic</span><span class="o">.</span><span class="na">getAverage</span><span class="o">();</span>
			<span class="n">printf</span><span class="o">(</span><span class="s">"Way%d had an avg of %f ns%n"</span><span class="o">,</span> <span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">average</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">printf</span><span class="o">(</span><span class="s">"Min of avgs is %f ns and belongs to %s%n"</span><span class="o">,</span> <span class="n">minOfAvgs</span><span class="o">,</span> <span class="n">minOfAvgsName</span><span class="o">);</span>
		<span class="n">printf</span><span class="o">(</span><span class="s">"Program ran for %f ms%n"</span><span class="o">,</span> <span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startProgram</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1000_000</span><span class="no">D</span><span class="o">);</span>
		<span class="n">flush</span><span class="o">();</span>
</code></pre>
      </div>
    </div>
    <h2 id="le-funzioni-di-appoggio-che-sono-tante">Le funzioni di appoggio (che sono tante)</h2>
    <p>Queste funzioni sono solo di appoggio all’esecuzione, ma sono fondamentali per avere un minimo di leggibilità nel codice principale.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">flush</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">OUT</span><span class="o">);</span>
		<span class="no">OUT</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="no">OUT</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printf</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">format</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">Object</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="no">OUT</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">format</span><span class="o">,</span> <span class="n">args</span><span class="o">));</span>
		<span class="k">else</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="n">format</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="no">OUT</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
		<span class="k">else</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">println</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="no">OUT</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">)</span>
					<span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">());</span>
		<span class="k">else</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">println</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="no">OUT</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
					<span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">());</span>
		<span class="k">else</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">println</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="no">PRINT_AT_LAST</span><span class="o">)</span>
			<span class="no">OUT</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">());</span>
		<span class="k">else</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
	<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h2 id="gli-algoritmi">Gli algoritmi</h2>
    <p>Gli algoritmi devono seguire la logica dell’algoritmo FizzBuzz.</p>
    <p>L’algoritmo specifica che, dato un insieme di numeri, per ogni numero se questo è multiplo di 3 stampa <strong>Fizz</strong>, se invece è multiplo di 5 stampa <strong>Buzz</strong>, se è multiplo di 3 o 5 (quindi se è multiplo del minimo comune multiplo di 3 e 5 che è 15) stampo <strong>FizzBuzz</strong>, altrimenti stampa il numero.</p>
    <h2 id="prima-implementazione">Prima implementazione</h2>
    <p>La prima implementazione è quella <em>scolastica</em>.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">way1</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="no">MIN_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">MAX_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="no">FIZZ_BUZZ</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">FIZZ_BUZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="no">BUZZ</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">BUZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="no">FIZZ</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">FIZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h2 id="seconda-implementazione">Seconda implementazione</h2>
    <p>Nella seconda implementazione faccio una considerazione: è possibile escludere il terzo ramo del condizionale?</p>
    <p>Si, semplicemente stampando Fizz per multipli di 3 e Buzz per multipli di 5 senza andare a capo.</p>
    <p>Di conseguenza per multipli di 3 o 5 (quindi del m.c.m. 15), alla fine ho stampato sia fizz che buzz.</p>
    <p>Per andare a capo, oppure per stampare il numero e completare il requisito mi appoggio a una variabile booleana per sapere se ho stampato qualcosa. Se questo è successo semplicemente vado a capo, altrimenti stampo il numero. Stesso risultato, ma con un ramo condizionale in meno e quindi plausibilmente con un calcolo in meno.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">way2</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="no">MIN_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">MAX_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="no">FIZZ</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">print</span><span class="o">(</span><span class="no">FIZZ_STRING</span><span class="o">);</span>
				<span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">%</span> <span class="no">BUZZ</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">print</span><span class="o">(</span><span class="no">BUZZ_STRING</span><span class="o">);</span>
				<span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">status</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">();</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h2 id="terza-implementazione">Terza implementazione</h2>
    <p>In questa implementazione mi faccio venire ancora un altro dubbio. <em>E se l’operazione di modulo fosse più lenta di un incremento?</em></p>
    <p>Del resto i calcolatori sono ottimizzati per calcolare addizioni, utilizzando delle istruzioni macchina come <code class="language-plaintext highlighter-rouge">ADD RAX, RBX</code> dove si aggiunge il valore contenuto nel registro <code class="language-plaintext highlighter-rouge">RBX</code> al numero (contatore) presente in <code class="language-plaintext highlighter-rouge">RAX</code>.</p>
    <p>Il modulo è un’operazione di divisione che ritorna il resto intero della divisione, che è particolarmente onerosa per i calcolatori, anche più moderni. Ma questa è un’altra storia che parla di Assembly e architetture dei calcolatori (Grazie Torlone!).</p>
    <p>Di conseguenza riscrivo l’algoritmo per evitare l’uso dell’operazione di modulo, usando piuttosto dei contatori che posso <em>resettare</em> una volta arrivati al risultato.</p>
    <p>Quindi l’algoritmo di fatto recita questo:</p>
    <p>Per ogni iterazione incremento i contatori <code class="language-plaintext highlighter-rouge">temp3</code> e <code class="language-plaintext highlighter-rouge">temp5</code>, a prescindere.</p>
    <p>Poi controllo se <code class="language-plaintext highlighter-rouge">temp3</code> è uguale a 3: se lo è stampo <strong>Fizz</strong> e resetto il contatore a 0.</p>
    <p>Poi controllo se <code class="language-plaintext highlighter-rouge">temp5</code> è uguale a 5: se lo è stampo <strong>Buzz</strong> e resetto il contatore a 0.</p>
    <p>Il resto del meccanismo è lo stesso della seconda implementazione, uso un booleano per capire se devo andare a capo o stampare il numero corrente. In questo modo gestisco anche il caso <strong>FizzBuzz</strong>.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">way3</span><span class="o">()</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">temp3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">temp5</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="no">MIN_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">MAX_FIZZ_BUZZ</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="kt">boolean</span> <span class="n">status</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
			<span class="n">temp3</span><span class="o">++;</span>
			<span class="n">temp5</span><span class="o">++;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">temp3</span> <span class="o">==</span> <span class="no">FIZZ</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">print</span><span class="o">(</span><span class="no">FIZZ_STRING</span><span class="o">);</span>
				<span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
				<span class="n">temp3</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">temp5</span> <span class="o">==</span> <span class="no">BUZZ</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">print</span><span class="o">(</span><span class="no">BUZZ_STRING</span><span class="o">);</span>
				<span class="n">status</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
				<span class="n">temp5</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
			<span class="o">}</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">status</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">();</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
			<span class="o">}</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h3 id="quarta-implementazione">Quarta implementazione</h3>
    <p>Questa è un bonus. A questo punto ho messo in dubbio anche le prestazioni del ciclo for.</p>
    <p>Di conseguenza ho pensato di implementare una funzione ricorsiva escludendo l’iterazione per capire se parte del problema di prestazioni potesse essere dovuta al ciclo.</p>
    <div class="language-java highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>	<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">way4</span><span class="o">(</span><span class="kd">final</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
			<span class="kt">boolean</span> <span class="n">mod3</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">%</span> <span class="no">FIZZ</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
			<span class="kt">boolean</span> <span class="n">mod5</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span> <span class="o">%</span> <span class="no">BUZZ</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
			<span class="k">if</span> <span class="o">(</span><span class="n">mod3</span> <span class="o">&amp;&amp;</span> <span class="n">mod5</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">FIZZ_BUZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">mod5</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">BUZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">mod3</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="no">FIZZ_STRING</span><span class="o">);</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="n">println</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
			<span class="o">}</span>
			<span class="n">way4</span><span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>
</code></pre>
      </div>
    </div>
    <h2 id="i-risultati">I risultati</h2>
    <p>Durante i miei test questo è quello che ho totalizzato sulla mia attuale macchina.</p>
    <div class="language-plaintext highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>Red Hat, Inc. OpenJDK 64-Bit Server VM 1.8.0_282 25.282-b08 52.0

Way1 had an avg of 2836,285100 ns
Way2 had an avg of 2899,041900 ns
Way3 had an avg of 2668,671600 ns
Way4 had an avg of 3179,854900 ns
Min of avgs is 2668,671600 ns and belongs to Way3

Program ran for 12715,462100 ms
</code></pre>
      </div>
    </div>
    <p>Il computer utilizzato ha queste specifiche:</p>
    <div class="language-plaintext highlighter-rouge">
      <div class="highlight">
        <pre class="highlight"><code>Intel(R) Core(TM) i7-6500U CPU @ 2.50GHz

Velocità di base:   2,59 GHz
Processori fisici:  1
Cores:              2
Processori logici:  4
Virtualizzazione:   Disabilitato
Supporto Hyper-V:   Sì
Cache L1:           128 KB
Cache L2:           512 KB
Cache L3:           4,0 MB
</code></pre>
      </div>
    </div>
    <p>Quindi in conclusione questo percorso mi ha permesso di comprendere che l’operazione di modulo è effettivamente <strong>lenta</strong>.</p>
    <p>E oltretutto ho sperimentato che la ricorsione è più onerosa (almeno in Java) dell’iterazione.</p>
    ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Oggi vorrei parlarvi di un algoritmo. Di norma un algoritmo talmente semplice da essere usato durante i colloqui per la valutazione della capacità minima di scrivere e leggere codice che comprenda il minimo indispensabile di logica, matematica e pensiero critico. L’algoritmo consiste nell’implementare una funzione che dati i numeri da 1 a 100 faccia quanto segue: stampi la stringa “Fizz” quando il numero è un multiplo di 3 stampi la stringa “Buzz” quando il numero è un multiplo di 5 stampi la stringa “FizzBuzz” quando il numero è un multiplo di 3 o 5 stampi il numero quando non è un multiplo di 3 né di 5 Semplice semplice. Ma allora perché ne parlo?]]></summary></entry><entry><title type="html">Il dilemma del calcolo delle stime</title><link href="https://klez.me/2022/03/25/il-dilemma-del-calcolo-delle-stime/" rel="alternate" type="text/html" title="Il dilemma del calcolo delle stime" /><published>2022-03-25T10:39:26+01:00</published><updated>2022-03-25T10:39:26+01:00</updated><id>https://klez.me/2022/03/25/il-dilemma-del-calcolo-delle-stime</id><content type="html" xml:base="https://klez.me/2022/03/25/il-dilemma-del-calcolo-delle-stime/"><![CDATA[<p>Di norma direi che il calcolo delle stime è qualcosa che facciamo tutti i giorni e che quindi almeno sulla carta ogni programmatore dovrebbe saper farlo.</p>
  <p>Di norma direi anche che ci dovrebbe essere una procedura, una <em>best practice</em> una formula che possa calcolare una stima.</p>
  <p>Siamo programmatori, quindi siamo ingegneri (più o meno)!</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <p>Invece questo argomento rimane complesso e basato su esperienza e capacità personali di chi sta tentando di tirare fuori un numero.</p>
  <p>Oltretutto, quella che dovrebbe essere solo un’informazione di massima utile per avere un’idea <em>a spanne</em> dei tempi di realizzazione diventa spesso la <em>deadline</em>, ma questa è un’altra storia, oppure <strong>un altro rant</strong>, se volete.</p>
  <h2 id="refs">Refs</h2>
  <p>Navigando su <a href="https://news.ycombinator.com/"><em>Hacker News</em></a> ho trovato questa perla, che qualcuno ha deciso di condividere rianimandola tramite archive.org.</p>
  <p>Se volete il link trovato su Hacker News e la perla in questione, <a href="https://news.ycombinator.com/item?id=28667174">qui</a> e <a href="https://web.archive.org/web/20170603123809/http://www.tuicool.com:80/articles/7niyym">qua</a> trovate tutto.</p>
  <p>Di seguito rielaboro a modo mio, come sempre.</p>
  <h2 id="lidea-geniale">L’idea geniale</h2>
  <p>L’idea è una ulteriore <em>best practice</em>, ma in forma di formula e non di additivo statistico, come mi insegnò un mio capo un tempo.</p>
  <p>La regola aurea è:</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote">
      <p>Moltiplica sempre le tue stime per π</p>
      <footer class="blockquote-footer"><cite title="#AltDevBlogADay">#AltDevBlogADay</cite></footer>
    </blockquote>
  </div>
  <p>Qualcuno - un progettista, il tuo <em>team leader</em>, un amico, tua madre - ti chiede di fare qualcosa. Tu rifletti, prendi appunti, consideri il requisito e fai un piano e, auspicabilmente, una stima.</p>
  <p>Ma le cose cambiano. Esce fuori che c’erano informazioni che il tuo <em>qualcuno</em> ha trascurato di menzionare, e mentre lavoravi hai avuto alcune idee per migliorarlo ulteriormente. Di fatto la quantità di lavoro è aumentata, hai più cose da fare.</p>
  <p>Ovviamente, non va tutto liscio. Quando mai. Il primo tentativo è stato un fallimento, però hai imparato qualcosa. Poi col secondo tentativo hai accelerato e hai lasciato indietro le <em>best practice</em> architetturali che poi ti hanno portato alla necessità di fare <em>refactoring</em>. Hai impiegato due giorni in più per cercare una soluzione alternativa. Alla fine, il percorso per portare a casa il risultato è come una strada di montagna, tutta storta e piena di buche (dalle mie parti diremmo è come la strada di <a href="https://it.wikipedia.org/wiki/Tolfa">Tolfa</a>, stesso concetto :grin:).</p>
  <p>Quindi, quanto è durato il lavoro rispetto al piano originale?</p>
  <p>Eccoti qui col problema in mano o “<em>col sorcio in bocca</em>”: qualunque cosa pensi quando inizi, dopo l’analisi, la progettazione, le discussioni, i prototipi, i fallimenti, i test, l’abbandono dei requisiti e tutte le altre fasi del processo creativo, l’avrai indubbiamente fatto <em>π volte</em> quanto avevi pianificato inizialmente.</p>
  <p>Ora, qualcuno potrebbe mettere in dubbio il mio rigore matematico, e perfino contestare quella che ritengo essere la conclusione incontrovertibile. Le persone possono affermare che il moltiplicatore corretto non è in effetti π, ma che è piuttosto 2, o √2, o <a href="https://it.wikipedia.org/wiki/E_(costante_matematica)">e</a>, o il rapporto aureo <a href="https://it.wikipedia.org/wiki/Sezione_aurea">φ</a>. Però sicuramente nessuno va in giro dicendo che il moltiplicatore sia inferiore a 1.</p>
  <blockquote>
    <p>Indipendentemente dalle tue inclinazioni numerologiche, il punto è che devi darti il ​​permesso di ammettere che, quando inizi un progetto, non hai il quadro completo, non sai come andranno le cose e c’è del lavoro da fare di cui non hai nessuna idea o indizi.
      Nessuna quantità di pianificazione e analisi delle attività può cambiarlo, quindi non provarci neanche. Invece, concediti un plausibile cuscinetto e impegnati a portare avanti il lavoro.</p>
  </blockquote>
  <p>Ah. Sai quella TODO List che hai scritto lo scorso weekend? Ti sei chiesto perché di quelle cose ne hai portate a casa solo circa un terzo?</p>
  <div class="row d-flex justify-content-center">
    <div class="col col-12 col-xl-8">
      <p><img src="/media/2022-03-25/il-dilemma-del-calcolo-delle-stime/coincidenza-non-credo.jpg" alt="Coincidenze-Non-Credo" class="img-fluid" /></p>
    </div>
  </div>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Di norma direi che il calcolo delle stime è qualcosa che facciamo tutti i giorni e che quindi almeno sulla carta ogni programmatore dovrebbe saper farlo. Di norma direi anche che ci dovrebbe essere una procedura, una best practice una formula che possa calcolare una stima. Siamo programmatori, quindi siamo ingegneri (più o meno)!]]></summary></entry><entry><title type="html">Il recruiter e l’informatico</title><link href="https://klez.me/2021/04/23/il-recruiter-e-linformatico/" rel="alternate" type="text/html" title="Il recruiter e l’informatico" /><published>2021-04-23T12:58:01+02:00</published><updated>2021-04-23T12:58:01+02:00</updated><id>https://klez.me/2021/04/23/il-recruiter-e-linformatico</id><content type="html" xml:base="https://klez.me/2021/04/23/il-recruiter-e-linformatico/"><![CDATA[<p>Oggi vorrei raccontare una storia.</p>
  <p>La storia di un recruiter incompetente che malauguratamente mi ha contattato in una giornata storta.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <p>Normalmente a un messaggio del genere avrei risposto solo “No Grazie”, “Non sono interessato”, “Rimaniamo in contatto per eventuali posizioni future”. Oppure avrei perso tempo a spiegare cosa faccio e cosa mi piacerebbe fare, nel vano e ingenuo tentativo di ricevere un’offerta degna di questo nome.</p>
  <p>Oggi no.</p>
  <p>Oggi mi sentivo di dire chiaramente alla persona al di là dello schermo che no, così non va bene, queste che mi (ci) vengono propinate non si chiamano offerte, sono delle supercazzole brematurate con scappellamento a destra che nascondono superficialità, mala gestione e assenza di considerazione per il possibile futuro dipendente.</p>
  <p>Ma analizziamo le parole. Tolto tutto il preambolo dell’azienda leader operante anche su Marte, grazie agli ultimi ritrovati della NASA, rimane questo, che potrebbe essere considerata “la ciccia”.</p>
  <p>“Vorrei presentarle un’opportunità come developer con competenze Java, Javascript, PHP, serv. RESTful, Db SQL, vers. SVN.<br />
    Se interessato ad approfondire, mi scriva.”</p>
  <p>Ora, le domande che mi verrebbero sono veramente tante, ma intanto qualche allarme rosso mi si è parato davanti agli occhi pesantemente.</p>
  <p>Intanto, se io volessi presentare un’offerta penso che dovrei descrivere almeno questi punti:</p>
  <ol>
    <li>
      <p>Inquadramento professionale<br />
        Cioè quale posizione andrei a ricoprire all’interno dell’azienda (Senior Software Developer, Software Architect, DevOps Engineer, QA Engineer, Inserviente Capo).<br />
        Questo mi darebbe l’idea di quale sarebbe la mia mansione (utile per capire se andrei a migliorare o peggiorare rispetto a dove sono ora).<br />
        Un plus è descrivere brevemente la mansione effettiva, questo in alcuni casi diventa obbligatorio perché alcune aziende sono “creative” con l’inquadramento professionale (vedi Microsoft con il suo Premier Field Engineer).</p>
    </li>
    <li>
      <p>Inquadramento economico e contrattuale<br />
        Penso che questo debba essere automatico visto che si parla di lavoro. Ho necessità di sapere se ci vado a rimettere come stipendio, benefit, contratto.<br />
        Si tratta di un part-time o un full-time?<br />
        Si tratta di un contratto di commercio, metalmeccanico, altro?<br />
        Si tratta di 12, 13, 14 mensilità?<br />
        Quali sono, eventualmente, i benefit?<br />
        C’è il rimborso spese? Se si, di quanto si tratta?</p>
    </li>
    <li>
      <p>Tecnologie in cui dovrei avere competenze<br />
        Questa è la parte più bella, perché di solito non ce n’è uno che sappia quello che scrive, potrei mettere dei nomi di pokémon nel curriculum e mi chiederebbero se ho esperienza anche su quelli.<br />
        Per qualsiasi lavoratore è fondamentale sapere con cosa avrà a che fare, questo rientra anche nella mansione.<br />
        Certo che se dovrai fare l’inserviente magari vuoi sapere quanti chilometri di corridoi dovrai pulire, quanti scopettoni hai a disposizione e se il magazzino si trova dentro o fuori dallo stabile.<br />
        Per un informatico questo si traduce nel sapere quale sarà lo stack tecnologico che userai.</p>
    </li>
  </ol>
  <p>Per tornare al messaggio originale, le “tecnologie” erano Java, PHP, JavaScript. Linguaggi semmai, che è ben diverso.</p>
  <p>Qui scrivere Java è inutile e a dir poco incompleto.</p>
  <p>Potrei lavorare con Java 1.6 e Java Enterprise Edition, su Servlet e EJB.<br />
    Potrei lavorare con Java 1.8 e Spring Web con Tomcat.<br />
    Potrei lavorare con Java 1.8 e Spring Boot.<br />
    Potrei lavorare con Java 1.8 e Quarkus.<br />
    Potrei lavorare con Java 1.8 e Play.<br />
    Potrei lavorare con Java 1.8 e Vert.x.<br />
    Potrei lavorare con Java 11 e JakartaEE.</p>
  <p>E sto considerando solo Java, e solo framework Web, non inizio neanche a descrivere librerie e framework per coprire altri layer di un’applicazione, tipo Hibernate, JPA, MyBatis, Jdbc.</p>
  <p>E non ho ancora nominato PHP, che tra PHP 5.3 e 5.6 c’è una differenza abissale, per non parlare di PHP 6 e PHP 7 (o l’improbabile PHP 8 appena uscito).</p>
  <p>Poi l’onnipresente JavaScript. Non ne voglio parlare perché altrimenti va a finire male. A questo punto mi sarei aspettato di leggere anche CSS e PhotoShop, fortunatamente non è stato così.</p>
  <p>Su db SQL volevo quasi essere buono, perché alla fine potrebbe bastare saper fare una query SQL decente, ma non posso esserne sicuro, perché quel “Db SQL” potrebbe onestamente voler dire qualsiasi cosa per una mente creativa.</p>
  <p>Dopo tutte queste domande e questa analisi, se per ingenuità volessi sapere effettivamente in cosa consiste questa offerta (perché mi ha detto che me la offre ma non mi ha detto cosa mi sta offrendo) non devo fare altro che perdere tempo a scrivere, magari sentendomi rispondere che “per l’inquadramento economico si attende il colloquio”, come fanno tante aziende.</p>
  <p>Io però non sono alla prima esperienza, sono un professionista serio.</p>
  <p>Per cercare una buona analogia, immagina che io venga da te e ti offra un bicchiere di vetro trasparente con un liquido trasparente all’interno.</p>
  <p>E ti dica, offrendoti il bicchiere: “Ho un’offerta per te, prendi!”</p>
  <p>Tu berresti da quel bicchiere senza farti domande?</p>
  <p>Il liquido trasparente potrebbe essere acqua certo, ma potrebbe essere Gin, Vodka, Sambuca, candeggina, acqua ossigenata, diserbante, olio minerale.</p>
  <p>In prospettiva, penso che non accetteresti il bicchiere, sapendo che potrebbe essere Vodka, che magari ti va bene, ma anche candeggina o diserbante, che magari ti ammazza.</p>
  <p>Senza queste informazioni io come faccio a sapere se la società che mi stai offrendo è fatta con la candeggina o con la vodka?</p>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Oggi vorrei raccontare una storia. La storia di un recruiter incompetente che malauguratamente mi ha contattato in una giornata storta.]]></summary></entry><entry><title type="html">Le basi dello sviluppo</title><link href="https://klez.me/2021/02/12/le-basi-dello-sviluppo/" rel="alternate" type="text/html" title="Le basi dello sviluppo" /><published>2021-02-12T16:16:59+01:00</published><updated>2021-02-12T16:16:59+01:00</updated><id>https://klez.me/2021/02/12/le-basi-dello-sviluppo</id><content type="html" xml:base="https://klez.me/2021/02/12/le-basi-dello-sviluppo/"><![CDATA[<p>Ultimamente mi trovo spesso a leggere di sviluppatori che non conoscono determinati acronimi, o che si ritrovano a chiamarsi “sviluppatori” senza sapere cosa effettivamente significhi sviluppare software.</p>
  <p>E come al solito mi <em>triggero</em> sulle basi e vado dritto come un pesce all’amo tentando di sviscerare un argomento che molti altri più bravi di me hanno tentato di sviscerare in libri interi spesso riuscendoci solo in parte.</p>
  <p>Mi ripeto sempre che è una cattiva idea usare un blog per parlare di un argomento così vasto e che i grandi come <strong>Uncle Bob</strong> e <strong>Kent Beck</strong> si rivolterebbero nella tomba se ne avessero una.</p>
  <p>Ma siccome sono entrambi ancora vivi, non temo questa reazione e quindi <em>sbaglio</em> con piacere, sperando anche di fare cosa gradita a quei 3 scappati di casa che leggono questo sito.</p>
  <p>Inizio, dopo l’inizio, dicendo che le basi dello sviluppo di software sono tante, e lo sviluppo di software è un’arte complessa che merita tempo per lo studio e dedizione per la materia, mancanti le quali il software non può essere sviluppato oppure può esserlo ma sarà brutto, poco performante, difficile da mantenere e probabilmente pieno di problemi.</p>
  <p>E soprattutto, un software sviluppato senza conoscere le basi sarà consegnato in ritardo, <strong>sempre</strong>. Qui non ci sono deroghe.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <h2 id="la-base-fra-le-basi-studiare">La base fra le basi: studiare</h2>
  <p>Non c’è dubbio che il settore informatico sia in continuo, apparentemente caotico movimento. E in ogni ambiente in cui il movimento è continuo e caotico la sopravvivenza è data da un’unica legge: <em>chi si ferma è perduto</em>.</p>
  <p>Di certo ci sarà chi pensa che si può tirare avanti con una singola tecnologia per tutta la propria carriera, e probabilmente è vero se si restringe il campo: in particolari ambiti, solo su alcuni progetti, per certi clienti e certe tecnologie probabilmente è possibile fare la stessa cosa tutta la vita.<br />
    Un esempio lampante è dato dal COBOL, che ancora oggi viene usato in ambienti <em>mainframe</em> dopo 50 anni o più di sviluppo.</p>
  <p>Non augurerei comunque a nessuno di leggere quel codice, considerando che inizialmente i COBOListi venivano pagati a righe di codice (LoC). Immagina che porcaio di righe di 4 caratteri c’erano.</p>
  <p>Per non fermarsi, un buon programmatore al passo coi tempi deve studiare. Studiare le nuove tecnologie, si, ma anche (e soprattutto) le basi.</p>
  <p>Perché, se devo davvero dire cosa mi abbia aiutato a spaziare così tanto su tecnologie così diverse, ecco, sarebbe questo.</p>
  <p>Per parafrasare (a mio favore) un famoso adagio:</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote">
      <p>Dai un pesce a un uomo e lo nutrirai per un giorno.</p>
      <p>Insegnagli a pescare e lo nutrirai per tutta la vita.</p>
      <footer class="blockquote-footer"><cite title="Proverbio Cinese (forse attribuibile a Confucio)">Proverbio Cinese (forse attribuibile a Confucio)</cite></footer>
    </blockquote>
  </div>
  <p>La mia versione è questa:</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote">
      <p>Dai una tecnologia a un uomo e lavorerà un decennio (<em>forse, se non è un framework JavaScript</em>).</p>
      <p>Insegnagli le basi e lavorerà per sempre (<em>oppure svilupperà un framework JavaScript al mese</em>).</p>
      <footer class="blockquote-footer"><cite title="kLeZ">kLeZ</cite></footer>
    </blockquote>
  </div>
  <p>Il concetto è questo: conoscere le basi è come saper pescare.</p>
  <p>Ma studiare non è un consiglio sufficiente, perché la prima domanda è: studiare, ok, ma cosa?</p>
  <h2 id="i-principi-formali">I principi formali</h2>
  <p>Nella scienza dell’informatica, ancora meglio nell’ingegneria del software, esistono molti “guru” (veri, non come il mago Otelma) che si propongono di racchiudere i loro molti anni di esperienza in alcune pratiche considerate di successo.</p>
  <p>Spesso il processo prevede che questi super-tecnici stilino due elenchi, uno con le pratiche che sicuramente sono sbagliate e, partendo da questo, un elenco di pratiche che sicuramente hanno avuto una percentuale di successo sufficientemente alta.</p>
  <p>Loro stessi sperimentano in prima persona questi principi prima di raccoglierli in dei testi che poi saranno utili ad altri professionisti o aspiranti tali del settore.</p>
  <p>In questo articolo, cito solo tre principi (qualcuno di più in realtà, capirete nel corso dell’articolo).</p>
  <h2 id="dry-dont-repeat-yourself">DRY (Don’t Repeat Yourself)</h2>
  <p>Questo principio viene da un ottimo libro, uno dei <em>must read</em> dell’artigiano del software di qualità.</p>
  <p>Parlo di <a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/">Il pragmatic programmer</a>, un libro che mi ha dato tante soddisfazioni, e che racchiude tra i tanti consigli un principio <em>pragmatico</em>: <strong>Non Ripeterti</strong>.</p>
  <p>Non Ripeterti (<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">Don’t Repeat Yourself, DRY</a>) è un principio che sintetizza il concetto del riuso di codice.<br />
    O meglio, gli autori del libro in realtà parlano in senso molto più generale dello sforzo di avere sempre un singolo elemento della conoscenza in un solo punto.</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote">
      <p>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system</p>
      <footer class="blockquote-footer"><cite title="Andy Hunt and Dave Thomas, The Pragmatic Programmer">Andy Hunt and Dave Thomas, The Pragmatic Programmer</cite></footer>
    </blockquote>
  </div>
  <p>Ma ciò su cui voglio soffermarmi io è l’applicazione di questo principio alla pratica della scrittura di codice.</p>
  <p>Questo principio è efficace nella stesura del codice se si pensa al fatto che puntare a riusare il codice ti porta a scrivere codice più pulito, generico e flessibile, proprio perché sai che potresti usarlo in contesti in cui certe premesse non sono più valide.</p>
  <p>E quindi ti porta a scrivere del codice di fatto di qualità più alta, pronto per il mondo esterno, usabile e magari già usato da porogrammatori differenti da te, che si sa potrebbero essere <em>diversamente simpatici</em>.</p>
  <div class="row d-flex justify-content-center">
    <div class="col col-12 col-xl-8">
      <p><img src="/media/2021-02-12/le-basi-dello-sviluppo/violent-psychopath.jpg" alt="Violent-Psychopath" class="img-fluid" /></p>
    </div>
  </div>
  <p>Il principio però, come mi è capitato di vedere altre volte può portare a un eccesso.</p>
  <p>Ho visto parecchi neofiti approcciare alla programmazione e ho notato che quasi tutti sono passati dal primo banale approccio del <em>pattern copia-incolla</em>, la pratica sconsigliata dagli autori del principio DRY, a non duplicare più nulla, rendendo inutilmente super complicati i metodi che scrivevano in una <strong>eccessiva</strong> ottica di riutilizzo.</p>
  <blockquote>
    <p>Vabbè ma prima mi dici che non devo duplicare il codice poi mi dici che non duplicarlo porta a codice complesso! Deciditi!</p>
  </blockquote>
  <p>E infatti è qui il punto, l’equilibrio. Ne parleremo parecchio.</p>
  <div class="row d-flex justify-content-center">
    <div class="col col-12 col-xl-8">
      <p><img src="/media/2021-02-12/le-basi-dello-sviluppo/393-balance-thanos.JPG" alt="Thanos-Balance" class="img-fluid" /></p>
    </div>
  </div>
  <p>Il concetto è quello di genericizzare quando c’è possibilità di farlo senza complicare molto il codice. Mi verrebbe da dire troppo, ma poi dovrei spiegare come si capisce quando il codice è troppo complicato, e c’è un altro guru di cui ho parlato spesso che ha scritto libri interi sull’argomento.</p>
  <p>Tipicamente comunque, un codice è troppo complicato quando qualcuno senza conoscenza del contesto lo legge senza capire bene quale sia il suo risultato.</p>
  <div class="row justify-content-center mb-5">
    <div class="col-12 col-xl-10">
      <div class="embed-responsive embed-responsive-16by9">
        <iframe class="embed-responsive-item" src="https://www.youtube-nocookie.com/embed/E8z3EecNuEI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>
      </div>
    </div>
  </div>
  <h2 id="yagni-you-arent-gonna-need-it">YAGNI (You Aren’t Gonna Need It)</h2>
  <p>Un altro principio fondamentale ci viene dagli originali ideatori della pratica <em>Agile</em> dell’<em>Extreme Programming</em> (<a href="https://en.wikipedia.org/wiki/Extreme_programming">XP</a>).</p>
  <p><a href="https://en.wikipedia.org/wiki/Ron_Jeffries">Ron Jeffries</a> ci regala questa perla, in cui ci spiega (in uno <em>slogan</em> praticamente) che non si deve cedere alla pratica diffusa di sviluppare cose perché si pensa possano essere utili <strong>in futuro</strong>.</p>
  <p>Rientrando in quello che a Roma potrebbe essere il nostro proverbiale “Non si sa mai”, ecco Ron e i suoi colleghi <a href="https://en.wikipedia.org/wiki/Ward_Cunningham">Ward Cunningham</a> e <a href="https://en.wikipedia.org/wiki/Kent_Beck">Kent Beck</a> (mica due tizi qualsiasi) che ci spiegano che al software questo adagio è meglio non applicarlo.</p>
  <p>È meglio perché nell’ottica <em>Agile</em> di rilasciare più <em>feature</em> possibile il più in fretta possibile, spendere del tempo per anticipare delle necessità <strong>eventuali</strong> non è il modo migliore di spendere quel tempo perché tanto <a href="https://en.wikipedia.org/wiki/You_aren't_gonna_need_it">You aren’t gonna need it, YAGNI</a>, appunto.</p>
  <blockquote>
    <p>Always implement things when you actually need them, never when you just foresee that you need them.</p>
  </blockquote>
  <h2 id="solid">SOLID</h2>
  <p>Il meglio viene alla fine, come sempre. SOLID però, mi spiace per te, non è un principio (o meglio, non uno solo), bensì cinque.</p>
  <p><a href="https://en.wikipedia.org/wiki/SOLID">SOLID</a> è un acronimo, quindi andiamo lettera per lettera, concetto per concetto, in ordine.</p>
  <h3 id="single-responsibility-principle-srp">Single responsibility principle (SRP)</h3>
  <p>Questo principio indica che ogni componente del sistema abbia una e una sola responsabilità. Di fatto è il principio alla base dell’incapsulamento.</p>
  <blockquote>
    <p>A class should only have a single responsibility, that is, only changes to one part of the software’s specification should be able to affect the specification of the class.</p>
  </blockquote>
  <p>Nella mia esperienza ho visto moltissimi progetti, e un curiosamente molto alto numero di <em>God Class</em>, cioè classi che nel software fanno <em>praticamente</em> ogni cosa, o quasi. Spesso sono anche <em>Singleton</em>, motivo per cui questo pattern è diventato un anti-pattern per molti, me compreso.</p>
  <p>C’è poco altro da spiegare: una classe deve fare una sola cosa e farla bene, In questo modo si riesce anche a rispettare il principio DRY, perché ogni classe diventa la <em>single source of truth</em> (la singola sorgente della verità) per quel determinato comportamento o quella parte della conoscenza.</p>
  <h3 id="open-closed-principle-ocp">Open-Closed Principle (OCP)</h3>
  <p>Questo principio spiega che un componente dovrebbe sempre essere aperto alle estensioni (qui il nostro “non si sa mai” è ammesso) ma chiusa per le modifiche.</p>
  <blockquote>
    <p>Software entities should be open for extension, but closed for modification.</p>
  </blockquote>
  <p>Questo principio porta con sé almeno due verità implicite:</p>
  <ul>
    <li>Più modifichi e più bug introduci (<em>potenzialmente</em>)</li>
    <li>Un componente non sarà mai scolpito nella pietra, i requisiti evolvono e il software con essi</li>
  </ul>
  <p>Anche qui, spesso ho visto classi che magari facevano una sola cosa, ma che erano dipendenza di molti altri componenti del sistema e venivano spesso modificate per supportare ulteriori comportamenti. Più spesso di quanto si pensi, aggiungere ulteriori comportamenti potrebbe portare a rompere i comportamenti esistenti, e quindi rompere le funzionalità esistenti.</p>
  <p>Dietro questo principio, come dietro a ogni principio c’è la volontà forte di spendere la maggior quantità di tempo possibile nello sviluppo di nuove funzionalità piuttosto che nella risoluzione dei problemi, perché quest’ultima non porta valore aggiunto al software (se non un software con meno problemi).</p>
  <p>Quindi, bisogna sempre stare attenti a non sviluppare classi che debbano essere modificate spesso, e questa è proprio la campanella che devi ascoltare per capire se il principio è rispettato o meno.</p>
  <h3 id="liskov-substitution-principle-lsp">Liskov Substitution Principle (LSP)</h3>
  <p>Ok, qui entriamo nel vivo della programmazione orientata agli oggetti (<a href="https://en.wikipedia.org/wiki/Object-oriented_programming">OOP</a>).</p>
  <p>Questo principio ci spiega che se un tipo B è un sottotipo di A, allora gli oggetti di tipo A devono poter essere sostituibili da oggetti di tipo B senza alterare il comportamento del programma.</p>
  <blockquote>
    <p>Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.</p>
  </blockquote>
  <p>Dipendentemente dal linguaggio che usi, potresti avere più o meno problemi con questo principio.</p>
  <p>Io sono stato relativamente fortunato a trovarmi poco di fronte a violazioni di questo tipo.</p>
  <p>C’è da dire che spesso ho visto progettazioni ingenue in cui si utilizzavano praticamente solo classi concrete tra di loro, e questo anche se non direttamente vìola questo principio.</p>
  <h3 id="interface-segregation-principle-isp">Interface segregation principle (ISP)</h3>
  <p>Anche qui si parla di OOP. E anche qui si parla di SRP.</p>
  <blockquote>
    <p>Ma scusa?! L’SRP l’avevamo già trattato! Questo non è DRY!</p>
  </blockquote>
  <p>Potrebbe sembrare che si parli di SRP, ed effettivamente questo principio è molto simile.</p>
  <p>Ma la sua valenza è fondamentale, perché qui non si tratta di far fare a un’interfaccia più cose, bensì si tratta di evitare le <em>God Class</em> che necessariamente risulterebbero dall’implementazione di una interfaccia con troppi metodi.</p>
  <p>Infatti il principio enuncia questo:</p>
  <blockquote>
    <p>Many client-specific interfaces are better than one general-purpose interface.</p>
  </blockquote>
  <p>Quindi, per puntualizzare, un client dovrebbe utilizzare una interfaccia di cui usa tutti i metodi (o quasi, qualche piccola deroga c’è), in contrapposizione con quelle interfacce piene di metodi di cui un client ne usa solo una piccola parte.</p>
  <p>Questo è fondamentale anche per evitare di esporre dei componenti a dei comportamenti fuorvianti magari perché indotte da dei metodi che hanno degli effetti collaterali non voluti o non gestiti.</p>
  <h3 id="dependency-inversion-priciple-dip">Dependency Inversion Priciple (DIP)</h3>
  <p>Qui parliamo sempre di progettazione del codice. Il principio si focalizza sulla scelta di progettazione di usare classi astratte o interfacce al posto di implementazioni concrete quando si introduce una dipendenza in un componente.</p>
  <blockquote>
    <p>A. High-level modules should not depend on low-level modules. Both should depend on abstractions (e.g., interfaces).</p>
    <p>B. Abstractions should not depend on details. Details (concrete implementations) should depend on abstractions.</p>
  </blockquote>
  <p>Si tratta sostanzialmente di disaccoppiare i componenti in maniera tale da non dipendere da una implementazione concreta.</p>
  <p>Questo è particolarmente utile quando si sceglie a un certo punto di reimplementare un componente per cambiarne il comportamento.</p>
  <p>Se infatti avendo come dipendenza una interfaccia a noi basta iniettare l’implementazione corretta e il software continua a funzionare a dovere, nel momento in cui la dipendenza è una implementazione concreta io non ho possibilità di usare il polimorfismo (e quindi il principio di sostituzione di Liskov) per sostituire l’implementazione e cambiare il comportamento.</p>
  <p>Questo principio definisce anche un ulteriore concetto, che è la <em>direzione</em> delle dipendenze.</p>
  <p>Su questo argomento, l’autore di questo principio ci tiene a sottolineare che i moduli di alto livello non dovrebbero dipendere da moduli di basso livello.</p>
  <p>L’inversione sta nel fatto che se entrambi i moduli, quello di basso livello e quello di alto livello, dipendono da un’astrazione, di fatto abbiamo invertito la dipendenza che invece tende intuitivamente ad avere moduli di alto livello che dipendono dai dettagli implementativi.</p>
  <h2 id="conclusioni">Conclusioni</h2>
  <p>I principi sono fondamentali, sono le basi su cui si dovrebbero fondare le competenze di un programmatore.</p>
  <p>Conoscere l’ennesimo luccicante faramework non solo non è sufficiente a definirsi buoni programmatori, ma non è neanche utile se poi questo framework viene usato senza che questi principi siano ben saldi nella mente dello sviluppatore che lo usa.</p>
  <p>Pensa a quanto è brutto (e pieno di <em>bug</em>, e lento) il codice scritto senza avere cognizione di causa di questi fondamentali precetti.</p>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Ultimamente mi trovo spesso a leggere di sviluppatori che non conoscono determinati acronimi, o che si ritrovano a chiamarsi “sviluppatori” senza sapere cosa effettivamente significhi sviluppare software. E come al solito mi triggero sulle basi e vado dritto come un pesce all’amo tentando di sviscerare un argomento che molti altri più bravi di me hanno tentato di sviscerare in libri interi spesso riuscendoci solo in parte. Mi ripeto sempre che è una cattiva idea usare un blog per parlare di un argomento così vasto e che i grandi come Uncle Bob e Kent Beck si rivolterebbero nella tomba se ne avessero una. Ma siccome sono entrambi ancora vivi, non temo questa reazione e quindi sbaglio con piacere, sperando anche di fare cosa gradita a quei 3 scappati di casa che leggono questo sito. Inizio, dopo l’inizio, dicendo che le basi dello sviluppo di software sono tante, e lo sviluppo di software è un’arte complessa che merita tempo per lo studio e dedizione per la materia, mancanti le quali il software non può essere sviluppato oppure può esserlo ma sarà brutto, poco performante, difficile da mantenere e probabilmente pieno di problemi. E soprattutto, un software sviluppato senza conoscere le basi sarà consegnato in ritardo, sempre. Qui non ci sono deroghe.]]></summary></entry><entry><title type="html">Using The Eisenhower Matrix In Emacs Org-Mode</title><link href="https://klez.me/2019/10/22/using-the-eisenhower-matrix-in-emacs-org-mode/" rel="alternate" type="text/html" title="Using The Eisenhower Matrix In Emacs Org-Mode" /><published>2019-10-22T16:18:35+02:00</published><updated>2019-10-22T16:18:35+02:00</updated><id>https://klez.me/2019/10/22/using-the-eisenhower-matrix-in-emacs-org-mode</id><content type="html" xml:base="https://klez.me/2019/10/22/using-the-eisenhower-matrix-in-emacs-org-mode/"><![CDATA[<p>Riporto integralmente l’articolo di Tom Purl che parla dell’integrazione della matrice di Eisenhower in Emacs Org-Mode.</p>
  <p>Purtroppo Tom ha rimosso l’articolo dal suo sito ma sono riuscito comunque a trovarlo tramite la <a href="https://web.archive.org/web/">Wayback Machine</a>.</p>
  <p>Di seguito (in inglese) l’articolo integrale. Forse (<strong>forse</strong>) porterò una traduzione di questo articolo nel blog, a imperitura memoria, soprattutto per chi non mastica granché l’inglese.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <p>I just finished reading the <a href="https://waitbutwhy.com/2015/03/procrastination-matrix.html">The Procrastination Matrix</a> article on the <a href="https://waitbutwhy.com/">Wait But Why</a> blog and it really spoke to me. I’m a big fan of using <a href="https://orgmode.org/">Org-Mode</a> in Emacs to organize all of my tasks, and I wondered if I could make both of these systems work together. Naturally, Org-Mode makes it really easy, and here’s how I did it.</p>
  <h2 id="easy-tagging">Easy Tagging</h2>
  <p>First, I need to be able to categorize my TODO’s as being urgent, important, or both. The easiest way to do this in Org-Mode is to use tags that looks something like this:</p>
  <div class="language-plaintext highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code>** TODO Pay bills                                                    :urgent:
</code></pre>
    </div>
  </div>
  <p>You can easily add tags using the <code class="language-plaintext highlighter-rouge">C-c C-c</code> command, but I like to make things even easier by using the <code class="language-plaintext highlighter-rouge">org-tag-alist</code> variable:</p>
  <div class="language-elisp highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">org-tag-alist</span> <span class="o">'</span><span class="p">((</span><span class="s">"important"</span> <span class="o">.</span> <span class="nv">?i</span><span class="p">)</span>
                    <span class="p">(</span><span class="s">"urgent"</span>    <span class="o">.</span> <span class="nv">?u</span><span class="p">)))</span>
</code></pre>
    </div>
  </div>
  <p>Now when I tag a TODO item, I simply need to type <code class="language-plaintext highlighter-rouge">i</code> or <code class="language-plaintext highlighter-rouge">u</code> to tag it as important and/or urgent.</p>
  <h2 id="canned-searches">Canned Searches</h2>
  <p>Now that my TODO’s are tagged I would like to be able to look at all 4 quadrants quickly and easily. I can do this in Org-Mode by setting the value of the <code class="language-plaintext highlighter-rouge">org-agenda-custom-commands</code> variable. Here’s what I have:</p>
  <div class="language-elisp highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code><span class="p">(</span><span class="k">setq</span> <span class="nv">org-agenda-custom-commands</span>
   <span class="o">'</span><span class="p">((</span><span class="s">"1"</span> <span class="s">"Q1"</span> <span class="nv">tags-todo</span> <span class="s">"+important+urgent"</span><span class="p">)</span>
     <span class="p">(</span><span class="s">"2"</span> <span class="s">"Q2"</span> <span class="nv">tags-todo</span> <span class="s">"+important-urgent"</span><span class="p">)</span>
     <span class="p">(</span><span class="s">"3"</span> <span class="s">"Q3"</span> <span class="nv">tags-todo</span> <span class="s">"-important+urgent"</span><span class="p">)</span>
     <span class="p">(</span><span class="s">"4"</span> <span class="s">"Q4"</span> <span class="nv">tags-todo</span> <span class="s">"-important-urgent"</span><span class="p">)))</span>
</code></pre>
    </div>
  </div>
  <p>Q1 stands for “quadrant 1” and contains all TODO’s that are tagged as both important and urgent. Q2 contains all of the TODO’s that are tagged as important but not urgent. And the rest should be pretty self explanatory.</p>
  <p>Now when I press <code class="language-plaintext highlighter-rouge">C-c a</code> I see my usual agenda search dialog with the following lines at the bottom:</p>
  <div class="language-plaintext highlighter-rouge">
    <div class="highlight">
      <pre class="highlight"><code>1    Q1        : +important+urgent
2    Q2        : +important-urgent
3    Q3        : -important+urgent
4    Q4        : -important-urgent
</code></pre>
    </div>
  </div>
  <p>I can then see all of the tasks for a given quadrant by pressing the corresponding number.</p>
  <h2 id="thats-it">That’s It!</h2>
  <p>Once again Org-Mode has proven itself to be very easy to customize. It literally does everything for me but complete my tasks and show the <a href="https://waitbutwhy.com/2013/10/why-procrastinators-procrastinate.html">Instant Gratification Monkey</a> who’s boss.</p>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Riporto integralmente l’articolo di Tom Purl che parla dell’integrazione della matrice di Eisenhower in Emacs Org-Mode. Purtroppo Tom ha rimosso l’articolo dal suo sito ma sono riuscito comunque a trovarlo tramite la Wayback Machine. Di seguito (in inglese) l’articolo integrale. Forse (forse) porterò una traduzione di questo articolo nel blog, a imperitura memoria, soprattutto per chi non mastica granché l’inglese.]]></summary></entry><entry><title type="html">PyTorch, la promessa del deep learning?</title><link href="https://klez.me/2019/10/17/pytorch-la-promessa-del-deep-learning/" rel="alternate" type="text/html" title="PyTorch, la promessa del deep learning?" /><published>2019-10-17T10:42:30+02:00</published><updated>2019-10-17T10:42:30+02:00</updated><id>https://klez.me/2019/10/17/pytorch-la-promessa-del-deep-learning</id><content type="html" xml:base="https://klez.me/2019/10/17/pytorch-la-promessa-del-deep-learning/"><![CDATA[<p>Recentemente mi sono appassionato al <em>Machine Learning</em>.</p>
  <p>Per chi non sapesse cos’è, il <em>machine learning</em> è una tecnologia (un insieme di tecnologie, in realtà) che permette calcoli piuttosto complessi in modo relativamente semplice e, cosa estremamente più importante, che può <strong>imparare</strong> dai dati che gli vengono somministrati.</p>
  <p>Questo permette di effettuare calcoli complessi sempre più precisi fino a un tasso di fallimento che rasenta lo zero, un fattore necessario per mansioni complicate e critiche come il riconoscimento delle semantico immagini e l’elaborazione statistica.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <h2 id="lo-standard-de-facto">Lo standard <em>de facto</em></h2>
  <p>Nel settore c’è già una specie di standard, una tecnologia che è consuetudine imparare a usare se si vuole sviluppare questo tipo di software. Parlo di una libreria sviluppata da <strong>Google</strong>, che si chiama <a href="https://www.tensorflow.org/">TensorFlow</a>.</p>
  <p>TensorFlow è una ottima libreria, potente e flessibile che permette di sviluppare delle ottime reti neurali. Ma, c’è un ma.</p>
  <h2 id="la-competizione-si-fa-dura">La competizione si fa dura</h2>
  <p>Si compete sempre molto nella Silicon Valley, e le grandi aziende sono maestre della competizione tecnologica.</p>
  <p>Facebook, che tecnologicamente non è da meno di Google in quanto a ingegneri, ha deciso di buttarsi nella mischia con qualcosa di simile al quasi monopolista TensorFlow. La loro creazione si chiama <a href="https://pytorch.org/">PyTorch</a>.</p>
  <p>PyTorch si presenta più come un <em>framework</em>, meno come una libreria, a differenza di TesorFlow. Questo significa che è più comodo e relativamente più semplice da utilizzare, perdendo però un minimo di flessibilità.</p>
  <h2 id="il-guadagno-della-dinamicità">Il guadagno della dinamicità</h2>
  <p>Questa flessibilità apparentemente persa è guadagnata nuovamente e con gli interessi grazie alla possibilità di PyTorch di gestire i nodi del grafo in maniera dinamica, utilizzando un metodo chiamato <em>auto-differenziazione in modalità inversa</em>.</p>
  <p>Questo guadagno è ancora più utile quando si tratta di effettuare il debugging della rete neurale, reso semplice e comodo dai soliti strumenti utilizzati per gli altri programmi python.</p>
  <p>Un ulteriore guadagno portato da PyTorch è la parallelizzazione dei dati praticamente automatica, che permette di utilizzare GPU multiple con praticamente nessuno sforzo.</p>
  <h2 id="il-miglior-python-a-oggetti-che-un-data-scientist-possa-desiderare">Il miglior python a oggetti che un data scientist possa desiderare</h2>
  <p>PyTorch somiglia molto a un qualsiasi framework python ben strutturato, e soprattutto è organizzato ad oggetti.</p>
  <p>In sostanza, PyTorch promette piuttosto bene essendo molto integrato sia con la filosofia del linguaggio che con i paradigmi funzionale e a oggetti.</p>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Recentemente mi sono appassionato al Machine Learning. Per chi non sapesse cos’è, il machine learning è una tecnologia (un insieme di tecnologie, in realtà) che permette calcoli piuttosto complessi in modo relativamente semplice e, cosa estremamente più importante, che può imparare dai dati che gli vengono somministrati. Questo permette di effettuare calcoli complessi sempre più precisi fino a un tasso di fallimento che rasenta lo zero, un fattore necessario per mansioni complicate e critiche come il riconoscimento delle semantico immagini e l’elaborazione statistica.]]></summary></entry><entry><title type="html">La situazione sul TDD</title><link href="https://klez.me/2019/09/13/la-situazione-sul-tdd/" rel="alternate" type="text/html" title="La situazione sul TDD" /><published>2019-09-13T19:00:57+02:00</published><updated>2019-09-13T19:00:57+02:00</updated><id>https://klez.me/2019/09/13/la-situazione-sul-tdd</id><content type="html" xml:base="https://klez.me/2019/09/13/la-situazione-sul-tdd/"><![CDATA[<p>Il TDD è una di quelle metodologie che più spesso viene bistrattata qui in Italia. Spesso si sente definire questo approccio come <em>troppo costoso</em> o peggio come <em>fallimentare</em>.<br />
    Molto spesso la “colpa” va al budget, sempre troppo risicato quantunque esso sia, ma qui si sa che la coperta viene commissionata su misura per un watusso e poi arrotolata fino a non coprirci neanche un pigmeo. E quello deve bastarti, altra non ne srotolano.</p>
  <p>Al di là delle facili critiche e delle superficiali battute tragicomiche, il fatto è che c’è molto ancora da fare per convincere i più biechi antagonisti di questa tecnica che vale la pena <em>iniziare</em> a fare dei test un componente necessario di ogni progetto.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <h2 id="cosa-è-il-tdd">Cosa è il TDD</h2>
  <p>Quindi cos’è il TDD? TDD è un acronimo che significa <em>Test Driven Development</em>; è una metodologia che ci consente di guidare lo sviluppo tramite i test, che sembra complicato ma non lo è.</p>
  <p>Guidare lo sviluppo tramite i test significa essenzialmente che i test vanno <strong>progettati bene</strong>, perché dovranno coprire ad alto livello tutti i casi d’uso richiesti dal committente del software.</p>
  <blockquote>
    <p>Un test alla fine non è altro che la spiegazione con verifica passo passo di una funzione del software usando il software stesso.</p>
  </blockquote>
  <p>Esistono diversi tipi di test che si usano per diversi scopi e in diversi contesti, e servono per allargare via via il cono di visibilità sul sistema. Vediamoli.</p>
  <h3 id="unit-test">Unit test</h3>
  <p>I test unitari o <em>unit test</em> sono i componenti principali di una qualsiasi <em>suite</em> di test. Con uno <em>unit test</em> andiamo a verificare il funzionamento di singole unità di codice, singoli metodi o singole funzioni, che dovrebbero fare una sola cosa e dovrebbero farla bene. Questo rientra nel <a href="/2019/03/28/spaghetti-code-its-that-bad/">Clean Code</a>, l’abbiamo già trattato.</p>
  <h3 id="integration-test">Integration test</h3>
  <p>A dispetto di quanto si pensa, non servono per verificare l’integrazione del sistema con altri sistemi, bensì servono per verificare che ogni componente del sistema sia correttamente integrato con gli altri. Inoltre gli <em>integration test</em> si usano anche per verificare che il sistema risponda correttamente ai requisiti funzionali (cioè che faccia ciò che è richiesto dal committente).</p>
  <h3 id="validation-test">Validation test</h3>
  <p>I test di validazione (solitamente manuali) sono test che validano il comportamento generale del sistema; sono chiamati anche test <em>end-to-end</em> o con l’acronimo <strong>E2E</strong>. In alcuni casi è possibile che anche questi test trovino spazio nella <em>suite</em> dei test del software da eseguire automaticamente, ma non è sempre così.</p>
  <h2 id="il-solito-uncle-bob-a-illuminarmi-la-strada">Il solito Uncle Bob a illuminarmi la strada</h2>
  <p>Quando morirà, spero il più tardi possibile, probabilmente mi sentirò smarrito e piangerò, come fosse stato mio padre. Beh, dal punto di vista puramente tecnico mi ha insegnato e mi insegna ancora tutto quello che sa, esattamente come farebbe un padre. Oh, non c’è un rapporto diretto, quello che insegna a me lo insegna a tutti tramite <a href="https://twitter.com/unclebobmartin">Twitter</a>, <a href="https://blog.cleancoder.com/">il suo blog</a> e i suoi libri.</p>
  <p>Lo Zio ha pubblicato, ormai molte lune or sono<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, <a href="https://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">questo interessante articolo</a> in cui analizza <a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">un altro articolo</a>, quello di nientemeno che <a href="https://en.wikipedia.org/wiki/Ian_Sommerville_(academic)">Ian Sommerville</a> uno dei più stimati professori di Ingegneria del Software, non uno qualunque, ecco.</p>
  <p>L’articolo analizza punto per punto le critiche di Sommerville bollandolo alla fine come neofita, a ragione tra l’altro.</p>
  <h2 id="sommervilles-issue">Sommerville’s issue</h2>
  <p>I problemi di Sommerville sono di certo una spiccata lentezza nell’apprendere la metodologia unita a una progettazione probabilmente ricca di compromessi.<br />
    Capita spesso di scendere a dei compromessi che imbruttiscono il codice, ma non dovremmo lasciarci tentare da queste scorciatoie perché il prezzo è sempre la qualità del codice, l’architettura e di conseguenza la difficoltà nello svolgere task semplici come scrivere un test o effettuare una modifica al comportamento.</p>
  <p>La prima critica mossa verso il TDD riguarda il primo dei problemi che incontrano i neofiti nell’approccio alla disciplina.</p>
  <h3 id="il-problema-dei-test-fragili">Il problema dei Test fragili</h3>
  <p>Un po’ sto traducendo da Uncle Bob, ma va bene lo stesso (almeno per me).</p>
  <p>Sommerville asserisce che il TDD rende conservativi riguardo al software, cioè rende chi adotta questo approccio molto avverso all’applicazione di cambiamenti nel software.</p>
  <p>La risposta dello Zio ovviamente riguarda l’architettura; un software su cui si ha avversione ad applicare modifiche è un software mal progettato. E io sono assolutamente d’accordo. Aggiungo qualcosa di mio riprendendo esattamente la frase di Sommerville.</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">
      <p>Because you want to ensure that you always pass the majority of tests,
        you tend to think about this when you change and extend the program.
        You therefore are more reluctant to make large-scale changes that will lead to the failure of lots of tests.
        Psychologically, you become conservative to avoid breaking lots of tests.</p>
      <footer class="blockquote-footer"><cite title="Ian Sommerville"><a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">Ian Sommerville</a></cite></footer>
    </blockquote>
  </div>
  <p>Sostanzialmente, sembrerebbe che Sommerville abbia sperimentato quello che ci porta tutti a pensare di abbandonare il TDD, inizialmente.</p>
  <p>Siccome, in quanto programmatori, siamo pigri, meno “fatica” facciamo per ottenere il risultato e più siamo contenti.</p>
  <p>Dato questo e dato che la nostra disciplina premia la pigrizia, impariamo ben presto a conservare il più possibile l’energia che abbiamo, tentando di percorrere strade anche non battute ma più brevi per risolvere il nostro problema.</p>
  <p>E Ian questo lo sa molto bene, non a caso ha insegnato Ingegneria del Software per svariati anni.</p>
  <p>La pigrizia è ciò che ci ha portato ad avere sistemi sempre più automatici, e la pigrizia ha portato Sommerville a “fallire” con il TDD.</p>
  <p>Quello che dice in parte è corretto, psicologicamente <strong>sei portato a diventare</strong> conservativo, ma solo perché scrivere test è un lavoro particolarmente noioso, che diventa relativamente meno noioso solo quando i test vengono usati per sviluppare la progettazione del sistema a partire dai casi d’uso. La parte incorretta è quella che dà pigramente e impunemente la colpa ai test e al TDD.</p>
  <p>Non è per il TDD che trovi noioso scrivere i test, è perché sei pigro! Un’arma estremamente utile in certi casi, ma altrettanto affilata se usata contro di te. Ho dato del pigro a Sommerville, si.</p>
  <p>Tanto più che Sommerville parla di <em>modifiche al sistema che rompono i test</em>, cosa <strong>inammissibile</strong> nel TDD, dove sono sempre i test i primi a essere modificati, mai l’opposto.</p>
  <p>Su questo punto Sommerville sembra soffermarsi un po’ di più e stabilisce un nuovo concetto:</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">
      <p>The most serious problem for me is that it encourages a focus on
        sorting out detail to pass tests rather than looking at the
        program as a whole. I started programming at a time where
        computer time was limited and you had to spend time looking at
        and thinking about the program as a whole. I think this leads to
        more elegant and better structured programs. But, with TDD, you
        dive into the detail in different parts of the program and
        rarely step back and look at the big picture.</p>
      <footer class="blockquote-footer"><cite title="Ian Sommerville"><a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">Ian Sommerville</a></cite></footer>
    </blockquote>
  </div>
  <p>Qui in pratica sta dicendo che i test, su cui siamo concentrati, ci costringono a soffermarci sui dettagli senza pensare alla <em>big picture</em>, anzi abbandonandola e dimenticandola.</p>
  <p>Anche questo errore è relativo alla sua condizione di neofita dell’approccio, che lo porta a faticare molto per comprendere la nuova metodologia e i nuovi artefatti su cui sta lavorando perdendo di fatto la rotta sulla <em>big picture</em> ma non a causa dei test, bensì a causa del suo essere un neofita.</p>
  <h3 id="il-problema-della-progettazione-testabile">Il problema della progettazione testabile</h3>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">
      <p>It is easier to test some program designs than others.
        Sometimes, the best design is one that’s hard to test
        so you are more reluctant to take this approach because you
        know that you’ll spend a lot more time designing and writing
        tests (which I, for one, quite a boring thing to do)</p>
      <footer class="blockquote-footer"><cite title="Ian Sommerville"><a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">Ian Sommerville</a></cite></footer>
    </blockquote>
  </div>
  <p>Qui Robert si arrabbia un po’ e ha ragione.</p>
  <p>Io mi arrabbio un po’ di più (sapete, la giovane età :grin:) e ho ragione pure io.</p>
  <p><strong>Certo</strong> che certi componenti sono più difficili da testare di altri, certo.<br />
    Ogni dispositivo di IO è difficile da testare, no?</p>
  <p>Immagina di dover testare le interazioni di un dispositivo VR, o di una fotocamera con sensore di profondità (videocamere 3D), quale sarebbe l’approccio per testarlo? Quali sarebbero i test specifici?</p>
  <p>In quali condizioni saremmo soddisfatti dei test tanto da accettare il software?</p>
  <p>Si tratta di domande molto complicate a cui rispondere, <strong>ovviamente</strong>. La parola che sbaglia tantissimo è <em>designs</em>, non sono <em>certe architetture</em> ad essere più difficili di altre, sono i <em>design</em> sbagliati che non sono testabili, per vari motivi.<br />
    Sempre su questo punto aggiungo che <strong>di solito</strong> la difficoltà di scrivere dei buoni test è data da una <strong>mancanza</strong> di architettura piuttosto che da una cattiva architettura.<br />
    Lo Zio Bob non si spinge fino all’affermare che ci sia una <em>totale mancanza di architettura</em>, perché per lui non può esistere un software <strong>senza architettura</strong>, per me si.<br />
    Per me un software può essere stato scritto senza pensare a un’architettura, e si nota immediatamente, di conseguenza è molto semplice cadere nel baratro dell’impossibilità o della estrema difficoltà nell’implementazione dei test.</p>
  <p>Questo è uno dei capisaldi di <em>Uncle Bob</em> che però io mi sono sentito di mettere in dubbio. Per lui anche l’assenza di architettura è un’architettura, e dal punto di vista pratico ha ragione. Ma dal punto di vista della progettazione cosciente e consapevole, secondo me, determinati software non hanno un’architettura, dove per “non hanno un’architettura” intendo che chi ha sviluppato questi software non aveva in mente alcuna idea o convenzione o pattern ben preciso e ha scritto, secondo me, <em>di getto</em>, cioè non consapevolmente.</p>
  <p>Per chiudere su Sommerville, qui lui ha fatto un errore da neofita sul TDD: l’architettura di un progetto TDD va pensata, e i componenti devono essere progettati col chiaro scopo di testarli, ora o in futuro.</p>
  <p>Cito <em>Uncle Bob</em> direttamente, ma perché in questo caso mi ha davvero tolto le parole di bocca (o i caratteri da sotto alle dita).</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">
      <p>Any design that is hard to test is crap. Pure crap.</p>
      <footer class="blockquote-footer"><cite title="Robert 'Uncle Bob' Martin"><a href="https://blog.cleancoder.com/uncle-bob/2016/03/19/GivingUpOnTDD.html">Robert 'Uncle Bob' Martin</a></cite></footer>
    </blockquote>
  </div>
  <h3 id="il-problema-del-proiettile-magico">Il problema del proiettile magico</h3>
  <p>A questo punto, i pensieri di Sommerville sono talmente confusi sul TDD che non riesce più a distinguerne il confine.<br />
    E inizia a pensare che il TDD debba essere una panacea che, solo per il fatto di essere stata applicata a un progetto, lo rende già migliore.<br />
    E lo fa in queste poche righe in cui argomenta malissimo.</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">
      <p>In my experience, lots of program failures arise because the
        data being processed is not what’s expected by the programmer.
        It’s really hard to write ‘bad data’ tests that accurately
        reflect the real bad data you will have to process because you
        have to be a domain expert to understand the data. The ‘purist’
        approach here, of course, is that you design data validation
        checks so that you never have to process bad data. But the
        reality is that it’s often hard to specify what ‘correct data’
        means and sometimes you have to simply process the data you’ve
        got rather than the data that you’d like to have.</p>
      <footer class="blockquote-footer"><cite title="Ian Sommerville"><a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">Ian Sommerville</a></cite></footer>
    </blockquote>
  </div>
  <p>Ovviamente la sua lamentela sui dati è non solo realistica, ma reale. Ma non ha nulla a che fare col TDD.</p>
  <p>In che modo una metodologia che ti aiuta a formalizzare dei test e verificare il funzionamento di un software potrebbe aiutarti o addirittura risolvere il problema che hai con i dati non validi?</p>
  <p>In quale modo il TDD dovrebbe anticipare tutti i casi su cui non hai ancora ragionato?</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote">
      <p>Il TDD non sostituisce la progettazione;<br />
        Il TDD non cura una pessima architettura;<br />
        Il TDD non scriverà per te i tuoi requisiti e le tue validazioni
        sui dati e sugli algoritmi.</p>
      <footer class="blockquote-footer"><cite title="kLeZ">kLeZ</cite></footer>
    </blockquote>
  </div>
  <p>L’unico modo per gestire dati non validi in un software è anticipare in fase di progettazione quanti più casi non validi possibile, e il TDD al limite ci è di aiuto come <em>strumento</em> per scrivere i test che verificano il comportamento del sistema in presenza di quei dati non validi che abbiamo teorizzato possano esistere.</p>
  <p>Una cosa giusta però Sommerville l’ha scritta alla fine, che però non riguarda direttamente il TDD ma l’attitudine alla meccanizzazione delle operazioni che è tipica del programmatore pigro tipico.</p>
  <div class="premonition citation">
    <div class="fas fa-quote-left"></div>
    <blockquote class="content blockquote" cite="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">
      <p>Think-first rather than test-first is the way to go.</p>
      <footer class="blockquote-footer"><cite title="Ian Sommerville"><a href="https://iansommerville.com/systems-software-and-technology/2016/03/17/giving-up-on-test-first-development/">Ian Sommerville</a></cite></footer>
    </blockquote>
  </div>
  <p>Ha ragione, le scimmie prima o poi scriveranno anche dei buoni test, e allora a noi resterà solo la capacità di pensare per distinguerci da loro.</p>
  <div class="footnotes" role="doc-endnotes">
    <ol>
      <li id="fn:1" role="doc-endnote">
        <p>nel 2016, 3 anni e mezzo fa. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
      </li>
    </ol>
  </div>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Il TDD è una di quelle metodologie che più spesso viene bistrattata qui in Italia. Spesso si sente definire questo approccio come troppo costoso o peggio come fallimentare. Molto spesso la “colpa” va al budget, sempre troppo risicato quantunque esso sia, ma qui si sa che la coperta viene commissionata su misura per un watusso e poi arrotolata fino a non coprirci neanche un pigmeo. E quello deve bastarti, altra non ne srotolano. Al di là delle facili critiche e delle superficiali battute tragicomiche, il fatto è che c’è molto ancora da fare per convincere i più biechi antagonisti di questa tecnica che vale la pena iniziare a fare dei test un componente necessario di ogni progetto.]]></summary></entry><entry><title type="html">Transazioni distribuite saghe e code</title><link href="https://klez.me/2019/07/27/transazioni-distribuite-saghe-e-code/" rel="alternate" type="text/html" title="Transazioni distribuite saghe e code" /><published>2019-07-27T12:56:10+02:00</published><updated>2019-07-27T12:56:10+02:00</updated><id>https://klez.me/2019/07/27/transazioni-distribuite-saghe-e-code</id><content type="html" xml:base="https://klez.me/2019/07/27/transazioni-distribuite-saghe-e-code/"><![CDATA[<p>Venerdì scorso ho tenuto un <em>talk</em> interno alla mia azienda sulle basi (molto basi) del framework Spring.<br />
    Mi sono concentrato poco sui dettagli, ho preferito puntare verso le potenzialità del framework e le <em>feature</em> più innovative e interessanti, con un occhio buono al cloud, vera punta di diamante di tutta la tecnologia Spring.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <p>Subito dopo il <em>talk</em> un mio collega mi ha chiesto informazioni su una tematica particolare.</p>
  <p>La sua domanda era relativa a delle tecniche, in particolare a librerie e/o pattern di Spring per poter gestire quella che io adesso ho imparato a chiamare “Transazione distribuita”. Non ne avevamo individuato il nome lì per lì.</p>
  <p>Da architetto ho già risolto questa problematica in <em>Java</em> tramite l’uso di <em>EJB transazionali</em>, quindi con <em>JavaEE</em>, ma mai mi ero posto il problema della transazionalità sui microservizi, liquidando il problema con un accorpamento nel servizio di tutto quello che ritengo atomico durante la scrittura di dati.</p>
  <blockquote>
    <p>Ma questo pone dei problemi di flessibilità dell’architettura, nonché di scalabilità del sistema.</p>
  </blockquote>
  <p>Ho intuitivamente risposto tramite una nascente metodologia che Spring implementa che è il <em>Reactive Programming</em> (Spring implementa le librerie WebFlux).<br />
    Questo paradigma di programmazione cambia completamente l’applicazione ma permette di rispondere a quelle esigenze.</p>
  <p>Però per la sua problematica non gliel’ho consigliato perché altrimenti avrebbero dovuto riscrivere tutto il sistema.<br />
    E noi consulenti non <em>possiamo</em> riscrivere tutto il sistema.</p>
  <p>Non contento personalmente della risposta ho studiato la problematica e ho compreso un pattern architetturale adatto ai sistemi distribuiti che ancora non conoscevo, il pattern <a href="https://microservices.io/patterns/data/saga.html">Saga</a>.</p>
  <p>Spring non implementa nulla direttamente, ma è possibile implementarlo sia con una coda (tipo <em>RabbitMQ</em> o <em>ActiveMQ</em>) sia con un framework chiamato <em>AxonIQ</em>, che comprende anche un orchestratore della transazione distribuita (che probabilmente gestisce una coda di messaggi interna, quindi siamo sempre li).</p>
  <p>Personalmente, penso che propenderei verso una soluzione più “casereccia” implementando una coda per caso d’uso, non ci ho ancora ragionato per bene.</p>
  <blockquote>
    <p>Certo è, che ho da studiare qualcosina durante le vacanze :grin:.</p>
  </blockquote>
  <p>Ringrazio il mio collega per la particolare domanda che mi ha spinto a studiare un argomento così interessante!</p>
  ]]></content><author><name>kLeZ</name></author><category term="spring" /><category term="eventi" /><summary type="html"><![CDATA[Venerdì scorso ho tenuto un talk interno alla mia azienda sulle basi (molto basi) del framework Spring. Mi sono concentrato poco sui dettagli, ho preferito puntare verso le potenzialità del framework e le feature più innovative e interessanti, con un occhio buono al cloud, vera punta di diamante di tutta la tecnologia Spring.]]></summary></entry><entry><title type="html">Il revisionismo del ritardo cronico</title><link href="https://klez.me/2019/07/19/il-revisionismo-del-ritardo-cronico/" rel="alternate" type="text/html" title="Il revisionismo del ritardo cronico" /><published>2019-07-19T19:50:00+02:00</published><updated>2019-07-19T19:50:00+02:00</updated><id>https://klez.me/2019/07/19/il-revisionismo-del-ritardo-cronico</id><content type="html" xml:base="https://klez.me/2019/07/19/il-revisionismo-del-ritardo-cronico/"><![CDATA[<p>Qualche sera fa ragionavo sul mio pregresso lavorativo, e nello specifico mi concentravo sull’ambiente di lavoro. Il <em>trigger</em> è stato il treno che ho preso quella sera, <strong>Ostiense, 20.40</strong>, che non è proprio il massimo della vita, questo posso dirlo, perché mi porta a casa alle 21.45 circa.</p>
  <p>Alla fine dell’analisi preliminare ho stabilito che volevo concentrare il mio ragionamento sull’orario di lavoro (ancora una volta) tentando di sviscerare il perché mi riduco sempre a sopportare certi orari.</p>
  <p>Mi sono trovato a dover confutare una ipotesi che portavo con me da lungo tempo.</p>
  <p>Avevo già verificato sperimentalmente questa ipotesi anni fa, e sembrava reggere. Fino a ora.</p>
  <!--more-->
  <p class="m-0 invisible zero-size">
    <a class="invisible" id="read-more" href="#">read more</a>
  </p>
  <h2 id="lipotesi">L’ipotesi</h2>
  <p>Avevo stabilito, sulla base di osservazioni, che il problema degli orari era sempre dovuto a questi pochi motivi:</p>
  <ul>
    <li>pianificazione errata delle attività</li>
    <li>team leader e manager stacanovisti</li>
    <li>ufficio HR assente o distratto</li>
    <li>disorganizzazione generale</li>
  </ul>
  <p>Quindi, quando molti anni fa, da junior, formulai questa ipotesi, osservai che <strong>aveva senso</strong> e la diedi per corretta, su base sperimentale.</p>
  <p>Negli anni ho raffinato questa ipotesi, partendo sempre dal preconcetto, in parte giusto, che la “colpa” (passami il termine) fosse sempre di chi faceva le regole.</p>
  <p>Via via ho aggiunto strati su strati che evidenziavano come ci sia sempre qualcuno che ha più potere decisionale della persona che reputi di “più alto grado” (anche se la catena non è così gerarchica).</p>
  <blockquote>
    <p>Poi il crack.</p>
  </blockquote>
  <h2 id="il-periodo-del-revisionismo">Il periodo del revisionismo</h2>
  <p>Mi sono trovato a un certo punto della mia carriera, purtroppo o per fortuna, a stare <em>dall’altra parte</em>.</p>
  <p>A questo punto, anche un po’ per amor proprio, ho dovuto comprendere <strong>cosa stava succedendo a me</strong>. Si perché anche io da <em>team leader</em> ho avuto necessità o sono stato costretto a fare orari non molto piacevoli.</p>
  <blockquote>
    <p>Il revisionismo è stato traumatico per me.</p>
  </blockquote>
  <p>Da questo ho tratto altri motivi da aggiungere alla lista sopra, senza però scendere mai profondamente nella causa radice.</p>
  <blockquote>
    <p>Sostanzialmente non ho seguito la regola dei 5 perché</p>
  </blockquote>
  <p>La nuova lista quindi è aggiornata nel modo seguente:</p>
  <ul>
    <li>pianificazione errata delle attività</li>
    <li>manager stacanovisti</li>
    <li>ufficio HR assente o distratto</li>
    <li>commerciali che vendono funzionalità impossibili nei tempi</li>
    <li>accordi blindati tra <em>executive</em></li>
    <li>imposizioni da parte del cliente</li>
    <li>disorganizzazione generale</li>
  </ul>
  <p>Ne ho aggiunti 3 sfilando i <em>team leader</em>, solo perché questa lista vede le cose da quel medesimo punto di vista.</p>
  <p><em>Stranamente</em> c’è ancora il punto sulla pianificazione errata, e il motivo è semplice: capita spesso che pur essendo <em>team leader</em> sia comunque il manager ad avere l’ultima parola sui numeri delle stime per le attività, che praticamente sempre subiscono riduzioni. Capita meno spesso, ma capita, che il <em>team leader</em> si basi su assunzioni errate nel formulare le stime, risultando quindi in stime errate, perché troppo ottimistiche o perché <em>pressappochistiche</em>.</p>
  <p>Tutto questo però non mi bastava, sapevo di non essermi fatto abbastanza domande, sapevo che c’era ancora qualche <strong>perché</strong> non espresso.</p>
  <h2 id="lintrospezione">L’introspezione</h2>
  <p>Il perché che ha sbloccato il ragionamento ha portato alla risposta seguente, che mi ha un po’ spiazzato e un po’ sollevato.</p>
  <blockquote>
    <p>Le persone fanno tardi in ufficio perché vogliono</p>
  </blockquote>
  <p>Mi ha spiazzato, devo ammetterlo. Realizzare che i miei orari in ufficio sono causati da me stesso non è proprio quello che mi aspettavo di scoprire.<br />
    Ma la cosa più particolare è che non sono arrivato a questa conclusione tramite una mia introspezione personale, piuttosto l’ho realizzato osservando altri, da un po’ più vicino.</p>
  <h2 id="il-dato">Il dato</h2>
  <p>L’osservazione ha richiesto diverso tempo e campioni eterogenei, e fortunatamente da consulente ne ho avuti un bel po’ a disposizione.</p>
  <p>Non rivelo nulla di quello che ho visto, quindi il sunto è che ho visto persone preferire il lavoro alla famiglia, ho visto persone che avevano la loro famiglia al lavoro e ho visto persone senza famiglia o lontano da casa avere amici solo dentro al lavoro. Poi però ho visto anche chi metteva la famiglia al di sopra di tutto, chi era scientificamente preciso nel rispettare gli orari e chi aveva interessi ben oltre l’informatica.</p>
  <p>Questi ultimi mi hanno fatto vedere qualcosa che mi ha aperto gli occhi.</p>
  <h2 id="il-famoso-ambiente-tossico">Il famoso “ambiente tossico”</h2>
  <blockquote>
    <p>Si sa che le aziende tentano di evitare di creare ambienti tossici per il lavoro.</p>
  </blockquote>
  <p>Questa sembra una battuta. Ma non lo è.</p>
  <p>Ci provano davvero, si <em>sforzano seriamente</em>.</p>
  <p>Ma allora perché <strong>sembra</strong> <em>così tanto</em> <strong>falso</strong>?</p>
  <p>Sembra falso perché, come ho sempre immaginato e questa osservazione conferma l’idea, il fine non giustifica <em>mai</em> i mezzi. <strong>Mai</strong>.</p>
  <p>Il mezzo ovviamente è lo straordinario, mentre il fine, beh, quello è palese, la consegna in tempi brevi.<br />
    Il problema è sempre <strong>quanto</strong> brevi e quanto veramente è utile o necessario che questi tempi siano brevi.</p>
  <p>La maggior parte delle volte non è utile, anzi è deleterio per la qualità del prodotto consegnato e per la qualità della vita del lavoratore.</p>
  <p>Fatto sta che succede, gli orari cambiano poco se non nulla e alla fine per un motivo o per un altro si torna a casa sempre a orari imprecisati della sera.</p>
  <p>La conclusione più ovvia sarebbe “facciamo in modo che le aziende si sforzino di più per raggiungere questo risultato”.<br />
    Si, se solo il lavoratore non avesse così tanta voglia di fare degli straordinari non pagati.</p>
  <p>Quindi la conclusione definitiva alla fine della mia introspezione è:</p>
  <blockquote>
    <p>Fai tardi quanto vuoi, se vuoi, ma dai la colpa a te stesso (o non darla a nessuno)<br />
      Altrimenti, non fare tardi “<em>‘ché c’hai ‘na famiglia</em>”</p>
  </blockquote>
  <p>Grazie ad Alberto che mi segue sempre con tanta dedizione, pure che è più di un mese che non pubblico (e avevo detto che avrei scritto qualcosa ogni giorno).</p>
  <blockquote>
    <p>Vai a casa Albè, che è tardi!</p>
  </blockquote>
  ]]></content><author><name>kLeZ</name></author><summary type="html"><![CDATA[Qualche sera fa ragionavo sul mio pregresso lavorativo, e nello specifico mi concentravo sull’ambiente di lavoro. Il trigger è stato il treno che ho preso quella sera, Ostiense, 20.40, che non è proprio il massimo della vita, questo posso dirlo, perché mi porta a casa alle 21.45 circa. Alla fine dell’analisi preliminare ho stabilito che volevo concentrare il mio ragionamento sull’orario di lavoro (ancora una volta) tentando di sviscerare il perché mi riduco sempre a sopportare certi orari. Mi sono trovato a dover confutare una ipotesi che portavo con me da lungo tempo. Avevo già verificato sperimentalmente questa ipotesi anni fa, e sembrava reggere. Fino a ora.]]></summary></entry></feed>